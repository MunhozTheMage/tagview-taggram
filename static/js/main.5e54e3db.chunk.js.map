{"version":3,"sources":["API/taggram.js","pathMode.js","Components/Header/header.js","Components/Post/comment.js","Components/Post/post.js","Components/Footer/footer.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","loggedUser","superagent","get","then","res","body","currentPost","message","a","isStable","stable","uuid","username","post","send","set","inDevMode","isDev","React","pathAdapter","path","newPath","Header","useState","avatar","userData","setUserData","user","catch","useEffect","showUserInfoWhenReady","className","alt","src","Comment","props","image","name","text","time","timeDiff","Math","floor","Date","now","timeSuffix","round","timeSinceComment","Post","photo","location","comments","created_at","postData","setPostData","commentMessage","setCommentMessage","status","critical","hasError","setHasError","err","showPostInfoWhenReady","setTimeout","postImage","postOwner","city","country","postInfo","length","date","day","getDate","month","getMonth","getTextDate","commentPublication","value","onChange","e","target","placeholder","onClick","postComment","newPostData","errorDisplay","map","comment","id","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e54e3db.chunk.js","sourcesContent":["import superagent from 'superagent';\r\n\r\nconst baseURL = \"https://taggram.herokuapp.com\";\r\n\r\nexport const loggedUser = getMe().then((res) => res.body);\r\nexport const currentPost = getPost().then((res) => res.body);\r\n\r\nfunction getMe() {\r\n    return superagent.get(`${baseURL}/me`);\r\n}\r\n\r\nfunction getPost() {\r\n    return superagent.get(`${baseURL}/post`)\r\n}\r\n\r\nexport async function postComment(message, isStable = true) {\r\n    // DEBUG ONLY\r\n    const stable = isStable ? \"?stable=true\" : \"\";\r\n\r\n    const { uuid } = await currentPost;\r\n    const { username } = await loggedUser;\r\n\r\n    return superagent\r\n        .post(`${baseURL}/posts/${uuid}/comments${stable}`)\r\n        .send({ username, message })\r\n        .set('Accept', 'application/json');\r\n}","import React from 'react';\r\nimport isDev from 'react-is-dev';\r\n\r\nconst inDevMode = isDev(React);\r\n\r\nexport default function pathAdapter(path) {\r\n    let newPath = inDevMode ? '/tagview-taggram/' : './';\r\n    newPath += path;\r\n    return newPath;\r\n}\r\n","// Libraries\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Styles\r\nimport \"./header.css\";\r\n\r\n// JS Files\r\nimport pathAdapter from \"../../pathMode.js\";\r\nimport { loggedUser } from '../../API/taggram.js';\r\n\r\nexport default function Header() {\r\n    // Initializes the page without the user info.\r\n    const [ userData, setUserData ] = useState({ username: \"\", avatar: \"\" });\r\n\r\n    // When the promisse is fulfilled, update the state with the\r\n    // acquired info.\r\n    async function showUserInfoWhenReady() {\r\n        loggedUser\r\n        .then((user) => {\r\n            const { username, avatar } = user;\r\n            setUserData({ username, avatar });\r\n        })\r\n        .catch(() => {});\r\n    }\r\n\r\n    // Calls the showUserInfoWhenReady function once when the page\r\n    // loads.\r\n    useEffect(() => {\r\n        showUserInfoWhenReady();\r\n    }, []);\r\n\r\n    return (\r\n        <header className=\"taggram-header\">\r\n            <div className=\"content-container\">\r\n                <img className=\"logo\" alt=\"logo\" src={pathAdapter(\"images/logo.svg\")}></img>\r\n                <div className=\"logged-user\">\r\n                    <p>{userData.username}</p>\r\n                    { userData.avatar ?\r\n                    <img className=\"avatar\" src={userData.avatar}></img>\r\n                    :\r\n                    <div className=\"avatar empty\"></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport \"./comment.css\";\r\n\r\nexport default function Comment(props) {\r\n    var {image, name, text, time} = props;\r\n\r\n    // Returns the time diference with a suffix on the end\r\n    // of the string.\r\n    function timeSinceComment() {\r\n        var timeDiff = Math.floor((Date.now() - new Date(time)) / 1000);\r\n        var timeSuffix = 's';\r\n\r\n        if(timeDiff / (60 * 60 * 24 * 365) >= 1) {\r\n            timeDiff = Math.floor(timeDiff / (60 * 60 * 24 * 365));\r\n            timeSuffix = 'y';\r\n        } else if(timeDiff / (60 * 60 * 24) >= 1) {\r\n            timeDiff = Math.round(timeDiff / (60 * 60 * 24));\r\n            timeSuffix = 'd';\r\n        } else if(timeDiff / (60 * 60) >= 1) {\r\n            timeDiff = Math.floor(timeDiff / (60 * 60));\r\n            timeSuffix = 'h';\r\n        } else if(timeDiff / 60 >= 1) {\r\n            timeDiff = Math.floor(timeDiff / 60);\r\n            timeSuffix = 'm';\r\n        }\r\n\r\n        return timeDiff + timeSuffix;\r\n    }\r\n\r\n    return (\r\n        <div className=\"comment\">\r\n            { image ? \r\n            <img src={image} className=\"comment-image\"></img>\r\n            : \r\n            <div className=\"comment-image empty\"></div>\r\n            }\r\n            <div>\r\n                <p className=\"content\"><strong>{name}</strong> {text}</p>\r\n                <p className=\"time\">{timeSinceComment()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nimport './post.css';\r\n\r\nimport { currentPost, postComment } from '../../API/taggram.js';\r\nimport Comment from './comment.js';\r\n\r\nexport default function Post() {\r\n    const [ postData, setPostData ] = useState({ \r\n        photo: \"\", \r\n        user: {}, \r\n        location: {}, \r\n        comments: [],\r\n        created_at: \"\"\r\n    });\r\n    const [ commentMessage, setCommentMessage ] = useState(\"\");\r\n    const [ hasError, setHasError ] = useState({\r\n        status: false,\r\n        critical: false,\r\n    });\r\n\r\n    // When the promisse is fulfilled, update the state with the\r\n    // acquired info.\r\n    async function showPostInfoWhenReady() {\r\n        currentPost\r\n        .then((post) => {\r\n            const { photo, user, location, comments, created_at } = post;\r\n            setPostData({ photo, user, location, comments, created_at });\r\n        })\r\n        .catch((err) => {\r\n            setHasError({ status: true, critical: true });\r\n        });\r\n    }\r\n\r\n    // Calls the showUserInfoWhenReady function once when the page\r\n    // loads.\r\n    useEffect(() => {\r\n        showPostInfoWhenReady();\r\n    }, []);\r\n\r\n    // Handle error state changes.\r\n    useEffect(() => {\r\n        if(!hasError.status) return;\r\n\r\n        if(!hasError.critical) {\r\n            setTimeout(() => {\r\n                setHasError({ status: false, critical: false });\r\n            }, 3000);\r\n        }\r\n    }, [ hasError ]);\r\n\r\n    // Returns an array of JSX elements for each of the comments on\r\n    // this post.\r\n    function renderComments() {\r\n        return postData.comments.map((comment, id) => {\r\n            return (\r\n                <Comment \r\n                    image={comment.user.avatar}\r\n                    name={comment.user.username}\r\n                    text={comment.message}\r\n                    time={comment.created_at}\r\n                    key={`comment_id_${id}`}\r\n                />\r\n            )\r\n        });\r\n    }\r\n\r\n    // Triggered on \"Enviar\" button click.\r\n    function handleSendComment() {\r\n        postComment(commentMessage, false)\r\n        .then((res) => {\r\n            if(!postData.created_at) return;\r\n\r\n            let newPostData = { ...postData };\r\n            newPostData.comments = res.body;\r\n\r\n            setPostData(newPostData);\r\n        })\r\n        .catch((err) => {\r\n            setHasError({ status: true, critical: false });\r\n        });\r\n    }\r\n\r\n    // Returns the date in DAY OF MONTH format as a string.\r\n    function getTextDate() {\r\n        if(!postData.created_at) return \"\";\r\n\r\n        let date = new Date(postData.created_at);\r\n        let day = date.getDate();\r\n\r\n        const names = [\r\n            \"JANEIRO\", \"FEVEREIRO\", \"MARÇO\",\r\n            \"ABRIL\", \"MAIO\", \"JUNHO\",\r\n            \"JULHO\", \"AGOSTO\", \"SETEMBRO\", \r\n            \"OUTUBRO\", \"NOVEMBRO\", \"DEZEMBRO\"\r\n        ];\r\n\r\n        let month = names[date.getMonth()];\r\n\r\n        return `${day} DE ${month}`;\r\n    }\r\n\r\n    // Post Image JSX Element.\r\n    const postImage = (\r\n        postData.photo ?\r\n        <img className=\"post-image\" src={postData.photo}></img>\r\n        :\r\n        <div className=\"post-image empty\"></div>\r\n    );\r\n\r\n    // Post Owner Information JSX Element.\r\n    const postOwner = (\r\n        <div className=\"post-owner-info\">\r\n            { postData.user.avatar ? \r\n                <img src={postData.user.avatar}></img>\r\n                : \r\n                <div className=\"empty\"></div>\r\n            }\r\n            \r\n            <div className=\"info-area\">\r\n                { postData.user.username ? \r\n                    <p className=\"name\">{postData.user.username}</p>\r\n                : null }\r\n\r\n                { postData.location.city && postData.location.country ? \r\n                    <p className=\"location\">{`${postData.location.city}, ${postData.location.country}`}</p>\r\n                : null }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // Post Information JSX Element.\r\n    const postInfo = (\r\n        <div className=\"comments-details\">\r\n            <strong>{`${postData.comments.length} comentários`}</strong>\r\n            <p>{getTextDate()}</p>\r\n        </div>\r\n    );\r\n\r\n    // Comment Publication JSX Element.\r\n    const commentPublication = (\r\n        <div className=\"new-comment-area\">\r\n            <textarea\r\n                value={commentMessage}\r\n                onChange={(e) => { setCommentMessage(e.target.value) }}\r\n                placeholder=\"Comente sobre essa postagem...\"\r\n            ></textarea>\r\n\r\n            <button\r\n                onClick={handleSendComment}\r\n            >Enviar</button>\r\n        </div>\r\n    );\r\n\r\n    // Error Display JSX Element.\r\n    const errorDisplay = (\r\n        <div className=\"new-comment-area error\">\r\n            <p>{ !hasError.critical ?\r\n                \"Não foi possível enviar seu comentário\"\r\n                : \r\n                \"Ocorreu um erro ao tentar se conectar ao servidor\"\r\n            }</p>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"taggram-post\">\r\n            <div className=\"post-area\">\r\n                { postImage }\r\n                <div className=\"post-details\">\r\n                    { postOwner }\r\n                    <div className=\"comments-area\">\r\n                        { renderComments() }\r\n                    </div>\r\n                    <div className=\"above-comments\">\r\n                        { postInfo }\r\n                        { !hasError.status ?\r\n                            commentPublication\r\n                            : \r\n                            errorDisplay\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport \"./footer.css\";\r\n\r\nimport pathAdapter from \"../../pathMode.js\";\r\n\r\nexport default function Footer() {\r\n\r\n    return (\r\n        <div className=\"taggram-footer\">\r\n            <img src={pathAdapter(\"images/tagview.svg\")}></img>\r\n        </div>\r\n    )\r\n}","import './main.css';\n\nimport { loggedUser, currentPost, postComment } from './API/taggram.js';\nimport Header from './Components/Header/header.js';\nimport Post from './Components/Post/post.js';\nimport Footer from './Components/Footer/footer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Post />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}