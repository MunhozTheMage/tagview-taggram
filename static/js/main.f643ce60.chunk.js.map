{"version":3,"sources":["API/taggram.js","pathMode.js","Components/Header/header.js","Components/Post/comment.js","Components/Post/post.js","Components/Footer/footer.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","loggedUser","superagent","get","then","res","body","currentPost","message","a","isStable","stable","uuid","username","post","send","set","inDevMode","isDev","React","pathAdapter","path","newPath","Header","useState","avatar","userData","setUserData","user","catch","useEffect","showUserInfoWhenReady","className","alt","src","Comment","props","image","name","text","time","timeDiff","Math","floor","Date","now","timeSuffix","round","timeSinceComment","Post","photo","location","comments","created_at","postData","setPostData","commentMessage","setCommentMessage","status","critical","hasError","setHasError","interactivity","setInteractivity","commentsBottom","useRef","err","showPostInfoWhenReady","setTimeout","postImage","postOwner","city","country","postInfo","length","date","day","getDate","month","getMonth","getTextDate","commentPublication","value","onChange","e","target","placeholder","onClick","postComment","newPostData","current","scrollIntoView","behavior","errorDisplay","map","comment","id","ref","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f643ce60.chunk.js","sourcesContent":["import superagent from 'superagent';\n\nconst baseURL = \"https://taggram.herokuapp.com\";\n\nexport const loggedUser = getMe().then((res) => res.body);\nexport const currentPost = getPost().then((res) => res.body);\n\nfunction getMe() {\n    return superagent.get(`${baseURL}/me`);\n}\n\nfunction getPost() {\n    return superagent.get(`${baseURL}/post`)\n}\n\nexport async function postComment(message, isStable = true) {\n    // DEBUG ONLY\n    const stable = isStable ? \"?stable=true\" : \"\";\n\n    const { uuid } = await currentPost;\n    const { username } = await loggedUser;\n\n    return superagent\n        .post(`${baseURL}/posts/${uuid}/comments${stable}`)\n        .send({ username, message })\n        .set('Accept', 'application/json');\n}","import React from 'react';\nimport isDev from 'react-is-dev';\n\nconst inDevMode = isDev(React);\n\nexport default function pathAdapter(path) {\n    let newPath = inDevMode ? '/tagview-taggram/' : './';\n    newPath += path;\n    return newPath;\n}\n","// Libraries\nimport React, { useState, useEffect } from 'react';\n\n// Styles\nimport \"./header.css\";\n\n// JS Files\nimport pathAdapter from \"../../pathMode.js\";\nimport { loggedUser } from '../../API/taggram.js';\n\nexport default function Header() {\n    // Initializes the page without the user info.\n    const [ userData, setUserData ] = useState({ username: \"\", avatar: \"\" });\n\n    // When the promisse is fulfilled, update the state with the\n    // acquired info.\n    async function showUserInfoWhenReady() {\n        loggedUser\n        .then((user) => {\n            const { username, avatar } = user;\n            setUserData({ username, avatar });\n        })\n        .catch(() => {});\n    }\n\n    // Calls the showUserInfoWhenReady function once when the page\n    // loads.\n    useEffect(() => {\n        showUserInfoWhenReady();\n    }, []);\n\n    return (\n        <header className=\"taggram-header\">\n            <div className=\"content-container\">\n                <img className=\"logo\" alt=\"logo\" src={pathAdapter(\"images/logo.svg\")}></img>\n                <div className=\"logged-user\">\n                    <p>{userData.username}</p>\n                    { userData.avatar ?\n                    <img className=\"avatar\" src={userData.avatar}></img>\n                    :\n                    <div className=\"avatar empty\"></div>\n                    }\n                </div>\n            </div>\n        </header>\n    )\n}","import React from 'react';\n\nimport \"./comment.css\";\n\nexport default function Comment(props) {\n    var {image, name, text, time} = props;\n\n    // Returns the time diference with a suffix on the end\n    // of the string.\n    function timeSinceComment() {\n        var timeDiff = Math.floor((Date.now() - new Date(time)) / 1000);\n        var timeSuffix = 's';\n\n        if(timeDiff / (60 * 60 * 24 * 365) >= 1) {\n            timeDiff = Math.floor(timeDiff / (60 * 60 * 24 * 365));\n            timeSuffix = 'y';\n        } else if(timeDiff / (60 * 60 * 24) >= 1) {\n            timeDiff = Math.round(timeDiff / (60 * 60 * 24));\n            timeSuffix = 'd';\n        } else if(timeDiff / (60 * 60) >= 1) {\n            timeDiff = Math.floor(timeDiff / (60 * 60));\n            timeSuffix = 'h';\n        } else if(timeDiff / 60 >= 1) {\n            timeDiff = Math.floor(timeDiff / 60);\n            timeSuffix = 'm';\n        }\n\n        return timeDiff + timeSuffix;\n    }\n\n    return (\n        <div className=\"comment\">\n            { image ? \n            <img src={image} className=\"comment-image\"></img>\n            : \n            <div className=\"comment-image empty\"></div>\n            }\n            <div>\n                <p className=\"content\"><strong>{name}</strong> {text}</p>\n                <p className=\"time\">{timeSinceComment()}</p>\n            </div>\n        </div>\n    )\n}","import React, { useState, useEffect, useRef } from 'react';\n\nimport './post.css';\n\nimport { currentPost, postComment } from '../../API/taggram.js';\nimport Comment from './comment.js';\n\nexport default function Post() {\n    const [ postData, setPostData ] = useState({ \n        photo: \"\", \n        user: {}, \n        location: {}, \n        comments: [],\n        created_at: \"\"\n    });\n    const [ commentMessage, setCommentMessage ] = useState(\"\");\n    const [ hasError, setHasError ] = useState({\n        status: false,\n        critical: false,\n    });\n    const [ interactivity, setInteractivity ] = useState(false);\n\n    const commentsBottom = useRef(null);\n\n    // When the promisse is fulfilled, update the state with the\n    // acquired info.\n    async function showPostInfoWhenReady() {\n        currentPost\n        .then((post) => {\n            const { photo, user, location, comments, created_at } = post;\n            setPostData({ photo, user, location, comments, created_at });\n            setInteractivity(true);\n        })\n        .catch((err) => {\n            setHasError({ status: true, critical: true });\n        });\n    }\n\n    // Calls the showUserInfoWhenReady function once when the page\n    // loads.\n    useEffect(() => {\n        showPostInfoWhenReady();\n    }, []);\n\n    // Handle error state changes.\n    useEffect(() => {\n        if(!hasError.status) return;\n\n        if(!hasError.critical) {\n            setTimeout(() => {\n                setHasError({ status: false, critical: false });\n            }, 3000);\n        }\n    }, [ hasError ]);\n\n    // Returns an array of JSX elements for each of the comments on\n    // this post.\n    function renderComments() {\n        return postData.comments.map((comment, id) => {\n            return (\n                <Comment \n                    image={comment.user.avatar}\n                    name={comment.user.username}\n                    text={comment.message}\n                    time={comment.created_at}\n                    key={`comment_id_${id}`}\n                />\n            )\n        });\n    }\n\n    // Triggered on \"Enviar\" button click.\n    function handleSendComment() {\n        setInteractivity(false);\n        postComment(commentMessage, false)\n        .then((res) => {\n            if(!postData.created_at) return;\n\n            setInteractivity(true);\n            setCommentMessage(\"\");\n\n            let newPostData = { ...postData };\n            newPostData.comments = res.body;\n\n            setPostData(newPostData);\n            commentsBottom.current.scrollIntoView({ behavior: 'smooth' });\n        })\n        .catch((err) => {\n            setInteractivity(true);\n            setHasError({ status: true, critical: false });\n        });\n    }\n\n    // Returns the date in DAY OF MONTH format as a string.\n    function getTextDate() {\n        if(!postData.created_at) return \"\";\n\n        let date = new Date(postData.created_at);\n        let day = date.getDate();\n\n        const names = [\n            \"JANEIRO\", \"FEVEREIRO\", \"MARÇO\",\n            \"ABRIL\", \"MAIO\", \"JUNHO\",\n            \"JULHO\", \"AGOSTO\", \"SETEMBRO\", \n            \"OUTUBRO\", \"NOVEMBRO\", \"DEZEMBRO\"\n        ];\n\n        let month = names[date.getMonth()];\n\n        return `${day} DE ${month}`;\n    }\n\n    // Post Image JSX Element.\n    const postImage = (\n        postData.photo ?\n        <img className=\"post-image\" src={postData.photo}></img>\n        :\n        <div className=\"post-image empty\"></div>\n    );\n\n    // Post Owner Information JSX Element.\n    const postOwner = (\n        <div className=\"post-owner-info\">\n            { postData.user.avatar ? \n                <img src={postData.user.avatar}></img>\n                : \n                <div className=\"empty\"></div>\n            }\n            \n            <div className=\"info-area\">\n                { postData.user.username ? \n                    <p className=\"name\">{postData.user.username}</p>\n                : null }\n\n                { postData.location.city && postData.location.country ? \n                    <p className=\"location\">{`${postData.location.city}, ${postData.location.country}`}</p>\n                : null }\n            </div>\n        </div>\n    );\n\n    // Post Information JSX Element.\n    const postInfo = (\n        <div className=\"comments-details\">\n            <strong>{`${postData.comments.length} comentários`}</strong>\n            <p>{getTextDate()}</p>\n        </div>\n    );\n\n    // Comment Publication JSX Element.\n    const commentPublication = (\n        <div className=\"new-comment-area\">\n            <textarea\n                value={commentMessage}\n                className={interactivity ? \"\" : \"disabled\"}\n                onChange={ interactivity ? (e) => { setCommentMessage(e.target.value) } : () => {} }\n                placeholder=\"Comente sobre essa postagem...\"\n            ></textarea>\n\n            <button\n                className={interactivity ? \"\" : \"disabled\"}\n                onClick={ interactivity ? handleSendComment : () => {} }\n            >{ interactivity ? \"Enviar\" : \"Aguarde\" }</button>\n        </div>\n    );\n\n    // Error Display JSX Element.\n    const errorDisplay = (\n        <div className=\"new-comment-area error\">\n            <p>{ !hasError.critical ?\n                \"Não foi possível enviar seu comentário\"\n                : \n                \"Ocorreu um erro ao tentar se conectar ao servidor\"\n            }</p>\n        </div>\n    );\n\n    return (\n        <div className=\"taggram-post\">\n            <div className=\"post-area\">\n                { postImage }\n                <div className=\"post-details\">\n                    { postOwner }\n                    <div className=\"comments-area\">\n                        { renderComments() }\n                        <div ref={commentsBottom}></div>\n                    </div>\n                    <div className=\"above-comments\">\n                        { postInfo }\n                        { !hasError.status ?\n                            commentPublication\n                            : \n                            errorDisplay\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport \"./footer.css\";\n\nimport pathAdapter from \"../../pathMode.js\";\n\nexport default function Footer() {\n\n    return (\n        <div className=\"taggram-footer\">\n            <img src={pathAdapter(\"images/tagview.svg\")}></img>\n        </div>\n    )\n}","import './main.css';\n\nimport { loggedUser, currentPost, postComment } from './API/taggram.js';\nimport Header from './Components/Header/header.js';\nimport Post from './Components/Post/post.js';\nimport Footer from './Components/Footer/footer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Post />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}